<% content_for :title, " Groom Backlog for " + @node.name %>
<%= render 'filters' %>

<% if @node.parent != nil %>
  <ol class="breadcrumb">
    <% if @node.parent.parent != nil %>
      <li><%= link_to Node.find(@node.parent.parent).name , @node.parent.parent %> </li>
    <% end %>
    <li> <%= link_to Node.find(@node.parent).name , @node.parent %></li>

  </ol>
<% end %>

<h2><%= link_to @node.name, @node %> Backlog</h2> 

<% @dependencies = Array.new %>

<div class="table-responsive">
    <table id="backlog" class="table table-striped table-hover">
      <thead>
        <th>Feature</th>
        <th>Specification</th>
        <th>Delivery</th>
        <th>Current Dependencies</th>
        <th>Has Open Issues</th>
        <th>Solves Open Issues</th>
        <th>Priority</th>
        <th>Added</th>
      </thead>
      <% @terminalNodes.each_with_index do |child, i|  %>
        <tr data-item-id=<%= "#{child.id}" %> 
            data-item-position=<%= child.get_row_order_position %> 
            data-item-dependencies=
            <%if child.get_highest_priority_dependency != nil %>
              <%= child.get_highest_priority_dependency %>
            <% else %>
             "0"
            <% end %>
          <% if child.status %>
            class="success" 
          <% elsif @dependencies.include?(child.id) %> 
          class="danger"<% end %>  
        >
          <% child.dependencies.each do |dependency| %>
            <% @dependencies << dependency.phase.node.id %>
          <% end %>
          <% if child.nodeType.feature or child.nodeType.feature_organizer %>
            <td><%= link_to child.name, child %></td>
            <td></td>
          <% else %>
            <td><%= link_to child.parent.name, child.parent %></td>
            <td><%= link_to child.name, child %></td>
          <% end %>
          <td>
            <% if child.get_next_delivery != nil %>
              <%= child.get_next_delivery.string %>
            <% elsif child.nodeType.specification %>
              <%= link_to 'Add Delivery Date', new_delivery_date_path(child) %>
            <% end %>
          </td>
          <td>
              <%= child.dependencies.count %>
          </td>
          <td><%= child.open_issues.count %></td>
          <td><%= child.solves_issues.count %></td>
          <td><span class="priority"><%= i+1 %></span></td>
          <td><%= child.created_at.strftime('%m/%d/%Y')%></td>
        </tr>
      <% end %>

    </table>
</div>


<script type="text/javascript">
/*
 * Jquery Multiselect插件 中文叫列表多选插件
 * 使用例子:
 * $('table').multiSelect({
 *  actcls: 'active',
 *  selector: 'tbody tr',
 *  callback: false
 * });
 * Checkout http://www.jqueryscript.net/table/jQuery-Plugin-To-Select-Multiple-Rows-In-A-Table-multiselect.html
 */
(function ($) {
    $.fn.multiSelect = function (options) {
        $.fn.multiSelect.init($(this), options);
    };

    $.extend($.fn.multiSelect, {
        defaults: {
            actcls: 'info', //选中样式
            selector: 'tbody tr', //选择的行元素
            except: ['tbody'], //选中后不去除多选效果的元素队列
            statics: ['.static'], //被排除行元素条件
            callback: false //选中回调
        },
        first: null, //按shift时，用于记住第一个点击的item
        last: null, //最后点击的item
        init: function (scope, options) {
            this.scope = scope;
            this.options = $.extend({}, this.defaults, options);
            this.initEvent();
        },
        checkStatics: function (dom) {
            for (var i in this.options.statics) {
                if (dom.is(this.options.statics[i])) {
                    return true;
                }
            }
        },
        initEvent: function () {
            var self = this,
                scope = self.scope,
                options = self.options,
                callback = options.callback,
                actcls = options.actcls;

            scope.on('click.mSelect', options.selector, function (e) {
                if (!e.shiftKey && self.checkStatics($(this))) {
                    return;
                }

                if ($(this).hasClass(actcls)) {
                    $(this).removeClass(actcls);
                } else {
                    $(this).addClass(actcls);
                }

                if (e.shiftKey && self.last) {
                    if (!self.first) {
                        self.first = self.last;
                    }
                    var start = self.first.index();
                    var end = $(this).index();
                    if (start > end) {
                        var temp = start;
                        start = end;
                        end = temp;
                    }
                    $(options.selector, scope).removeClass(actcls).slice(start, end + 1).each(function () {
                        if (!self.checkStatics($(this))) {
                            $(this).addClass(actcls);
                        }
                    });
                    window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
                } else if (!e.ctrlKey && !e.metaKey) {
                    $(this).siblings().removeClass(actcls);
                }
                self.last = $(this);
                $.isFunction(callback) && callback($(options.selector + '.' + actcls, scope));
            });

            /**
             * 点击其他处去除选中状态
             */
            $(document).on('click.mSelect', function (e) {
                for (var i in options.except) {
                    var except = options.except[i];
                    if ($(e.target).is(except) || $(e.target).parents(except).size()) {
                        return;
                    }
                }
                scope.find(options.selector).each(function () {
                    if (!self.checkStatics($(this))) {
                        $(this).removeClass(actcls);
                    }
                });
                $.isFunction(callback) && callback($(options.selector + '.' + actcls, scope));
            });

            /**
             * Ctrl+A全选
             */
            $(document).on('keydown.mSelect', function (e) {
                if ((e.keyCode == 65) && (e.metaKey || e.ctrlKey)) {
                    $(options.selector, scope).each(function () {
                        if (!self.checkStatics($(this))) {
                            $(this).addClass(actcls);
                        }
                    });
                    $.isFunction(callback) && callback($(options.selector + '.' + actcls, scope));
                    e.preventDefault();
                    return false;
                }
            });

            /**
             * 清楚shift按住的状态
             */
            $(document).on('keyup.mSelect', function (e) {
                if (e.keyCode == 16) {
                    self.first = null;
                }
            });
        }
    });
})(jQuery);
</script>




<script type="text/javascript">
/**
 * jquery.multisortable.js - v0.2
 * https://github.com/shvetsgroup/jquery.multisortable
 *
 * Author: Ethan Atlakson, Jay Hayes, Gabriel Such, Alexander Shvets
 * Last Revision 3/16/2012
 * multi-selectable, multi-sortable jQuery plugin
 */
function initPage() {
  // Page ready code...

!function($) {

  $.fn.multiselectable = function(options) {
    if (!options) {
      options = {}
    }
    options = $.extend({}, $.fn.multiselectable.defaults, options);

    function mouseDown(e) {
      //change dependent rows to yellow
      $earliest_dependency = $(this).attr("data-item-id");
      $( "[data-item-dependencies='"+ $earliest_dependency +"']").addClass("warning");
      //copied code
      var item = $(this),
        parent = item.parent(),
        myIndex = item.index();

      var prev = parent.find('.multiselectable-previous');
      // If no previous selection found, start selecting from first selected item.
      prev = prev.length ? prev : $(parent.find('.' + options.selectedClass)[0]).addClass('multiselectable-previous');
      var prevIndex = prev.index();

      if (e.ctrlKey || e.metaKey) {
        if (item.hasClass(options.selectedClass)) {
          item.removeClass(options.selectedClass).removeClass('multiselectable-previous')
          if (item.not('.child').length) {
            item.nextUntil(':not(.child)').removeClass(options.selectedClass);
          }
        }
        else {
          parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
          item.addClass(options.selectedClass).addClass('multiselectable-previous')
          if (item.not('.child').length) {
            item.nextUntil(':not(.child)').addClass(options.selectedClass);
          }
        }
      }

      if (e.shiftKey) {
        var last_shift_range = parent.find('.multiselectable-shift');
        last_shift_range.removeClass(options.selectedClass).removeClass('multiselectable-shift');

        var shift_range;
        if (prevIndex < myIndex) {
          shift_range = item.prevUntil('.multiselectable-previous').add(prev).add(item);
        }
        else if (prevIndex > myIndex) {
          shift_range = item.nextUntil('.multiselectable-previous').add(prev).add(item);
        }
        shift_range.addClass(options.selectedClass).addClass('multiselectable-shift');
      }
      else {
        parent.find('.multiselectable-shift').removeClass('multiselectable-shift');
      }

      if (!e.ctrlKey && !e.metaKey && !e.shiftKey) {
        parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
        if (!item.hasClass(options.selectedClass)) {
          parent.find('.' + options.selectedClass).removeClass(options.selectedClass);
          item.addClass(options.selectedClass).addClass('multiselectable-previous');
          if (item.not('.child').length) {
            item.nextUntil(':not(.child)').addClass(options.selectedClass);
          }
        }
      }

      options.mousedown(e, item);
    }

    function click(e) {
      if ( $(this).is('.ui-draggable-dragging') ) {
        return;
      }

      var item = $(this), parent = item.parent();

      // If item wasn't draged and is not multiselected, it should reset selection for other items.
      if (!e.ctrlKey && !e.metaKey && !e.shiftKey) {
        parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
        parent.find('.' + options.selectedClass).removeClass(options.selectedClass);
        item.addClass(options.selectedClass).addClass('multiselectable-previous');
        if (item.not('.child').length) {
          item.nextUntil(':not(.child)').addClass(options.selectedClass);
        }
      }

      options.click(e, item);
    }

    return this.each(function() {
      var list = $(this);

      if (!list.data('multiselectable')) {
        list.data('multiselectable', true)
          .delegate(options.items, 'mousedown', mouseDown)
          .delegate(options.items, 'click', click)
          .disableSelection();
      }
    })
  };

  $.fn.multiselectable.defaults = {
    click: function(event, elem) {},
    mousedown: function(event, elem) {},
    selectedClass: 'selected',
    items: 'tr'
  };


  $.fn.multisortable = function(options) {
    if (!options) {
      options = {}
    }
    var settings = $.extend({}, $.fn.multisortable.defaults, options);

    function regroup(item, list) {
      if (list.find('.' + settings.selectedClass).length > 0) {
        var myIndex = item.data('i');

        var itemsBefore = list.find('.' + settings.selectedClass).filter(function() {
          return $(this).data('i') < myIndex
        }).css({
            position: '',
            width: '',
            left: '',
            top: '',
            zIndex: ''
          });

        item.before(itemsBefore);

        var itemsAfter = list.find('.' + settings.selectedClass).filter(function() {
          return $(this).data('i') > myIndex
        }).css({
            position: '',
            width: '',
            left: '',
            top: '',
            zIndex: ''
          });

        item.after(itemsAfter);

        // console.log("selected initial item " + item.find(".priority").html());
        // console.log("moved to below " + item.prev().find(".priority").html());
        // console.log("and above " + item.next().find(".priority").html());


        item_id = item.data('item-id');
        prior_position = item.data('item-position');
        position = item.next().data('item-position');

        if(position == undefined){
          position = item.prev().data('item-position') + 1;
        }else if(prior_position < position){
          position = position - 1;
        }
        console.log("move to position " + position);

        $.ajax({
          type: 'POST',
          url: '/nodes/update_row_order',
          dataType: 'json',
          data: { node: {node_id: item_id, row_order_position: position } }}
        );


        setTimeout(function() {
          itemsAfter.add(itemsBefore).addClass(settings.selectedClass);
        }, 0);
      }
    }

    return this.each(function() {
      var list = $(this);

      //enable multi-selection
      list.multiselectable({
        selectedClass: settings.selectedClass,
        click: settings.click,
        items: settings.items,
        mousedown: settings.mousedown
      });

      //enable sorting
      options.cancel = settings.items + ':not(.' + settings.selectedClass + ')';
      options.placeholder = settings.placeholder;
      options.start = function(event, ui) {
        if (ui.item.hasClass(settings.selectedClass)) {
          var parent = ui.item.parent();

          //assign indexes to all selected items
          parent.find('.' + settings.selectedClass).each(function(i) {
            $(this).data('i', i);
          });

          // adjust placeholder size to be size of items
          var height = parent.find('.' + settings.selectedClass).length * ui.item.outerHeight();
          ui.placeholder.height(height);
        }

        settings.start(event, ui);
      };

      options.stop = function(event, ui) {
        regroup(ui.item, ui.item.parent());
        settings.stop(event, ui);
      };

      options.sort = function(event, ui) {
        var parent = ui.item.parent(),
          myIndex = ui.item.data('i'),
          top = parseInt(ui.item.css('top').replace('px', '')),
          left = parseInt(ui.item.css('left').replace('px', ''));

        // fix to keep compatibility using prototype.js and jquery together
        $.fn.reverse = Array.prototype._reverse || Array.prototype.reverse

        var height = 0;
        $('.' + settings.selectedClass, parent).filter(function() {
          return $(this).data('i') < myIndex;
        }).reverse().each(function() {
            height += $(this).outerHeight();
            $(this).css({
              left: left,
              top: top - height,
              position: 'absolute',
              zIndex: 1000,
              width: ui.item.width()
            })
          });

        height = ui.item.outerHeight();
        $('.' + settings.selectedClass, parent).filter(function() {
          return $(this).data('i') > myIndex;
        }).each(function() {
            var item = $(this);
            item.css({
              left: left,
              top: top + height,
              position: 'absolute',
              zIndex: 1000,
              width: ui.item.width()
            });

            height += item.outerHeight();
          });

        settings.sort(event, ui);
      };

      options.receive = function(event, ui) {
        regroup(ui.item, ui.sender);
        settings.receive(event, ui);
      };

      list.sortable(options).disableSelection();
    })
  };

  $.fn.multisortable.defaults = {
    start: function(event, ui) {},
    stop: function(event, ui) {},
    sort: function(event, ui) {},
    receive: function(event, ui) {},
    click: function(event, elem) {},
    mousedown: function(event, elem) {},
    selectedClass: 'selected',
    placeholder: 'placeholder',
    items: 'tr'
  };

}(jQuery);
}

$(function() {
  initPage();
});
$(window).bind('page:change', function() {
  initPage();
});


</script>



<script type="text/javascript">
  $(function () {
    $('#backlog').multiSelect();
  })

var ready;
ready = function() {

//Helper function to keep table row from collapsing when being sorted     
  var fixHelperModified = function(e, tr) {         
    var $originals = tr.children();         
    var $helper = tr.clone();         
    $helper.children().each(function(index)         
      {           
        $(this).width($originals.eq(index).width())         
      }
    );         
    return $helper;     
  };     

  //Make backlog table sortable     
  $("#backlog tbody").multisortable({         
    helper: fixHelperModified,         
    stop: function(event,ui) {renumber_table('#backlog')}     
  }).disableSelection();     


};


$(document).ready(ready);
$(document).on('page:load', ready);

//Renumber table rows 
function renumber_table(tableID) {     
  $(tableID + " tr").each(function() {         
    count = $(this).parent().children().index($(this)) + 1;         
    $(this).find('.priority').html(count); 
  }); 
}
</script>


    <script type="text/javascript">
      jQuery(function($){
        $('ul.sortable').multisortable();
        $('ul#list1').sortable('option', 'connectWith', 'ul#list2');
        $('ul#list2').sortable('option', 'connectWith', 'ul#list1');
      });
    </script>
    
 